general strategy:

start with top-down recursive solution ( DFS till base case )
results are returned back up the recursive stack

next create bottom-up DP solution ( BFS beginning at above base case(s) )
results are stored as partial solutions which build upon themselves

solutions:

link to question ( leetcode, hackerrank, etc )
pseudo code for REC/DP
actual code for REC/DP
detailed explanation with marked up code
  ( show how REC base case(s) turn into DP base cases )
  ( show overlapping sub-problems and optimal sub-structure )

general "tricks"

dp in general re-uses previous solutions in order to create current solutions
in a BFS bottom-up way.  There are 2 general iterative patterns for calculations:

create dp(size+1), return dp[size]

1) iterate from i=1 till i==size(inclusive) to check curr (i) with prev (i-1)
  OR
2) iterate from i=0 till i+1==size(inclusive) to check curr(i+1) with prev (i)


for recursive solutions first come up with the recursive case.  Assume we have
already found answers for all but the top, and create recursive formula

second come up with recursive constraints and base case(s)



Exceptions to top-down rec first, and bottom-up DP second.
Sometimes it is easier to just start with bottom-up DP...

https://leetcode.com/problems/paint-house/description/



1-Dimensional Top-Down + Bottom-Up:

[5. Longest Palindromic Substring](https://leetcode.com/problems/longest-palindromic-substring/discuss/635659/Javascript-and-C%2B%2B-solutions)
[72. Edit Distance](https://leetcode.com/problems/edit-distance/discuss/479377/Javascript-and-C%2B%2B-solutions)
[139. Word Break](https://leetcode.com/problems/word-break/discuss/632205/Javascript-and-C%2B%2B-solutions)
[1035. Uncrossed Lines](https://leetcode.com/problems/uncrossed-lines/discuss/652184/Javascript-and-C%2B%2B-solutions)
[1406. Stone Game III](https://leetcode.com/problems/stone-game-iii/discuss/657825/Javascript-and-C%2B%2B-solutions)
[1458. Max Dot Product of Two Subsequences](https://leetcode.com/problems/max-dot-product-of-two-subsequences/discuss/653625/Javascript-and-C%2B%2B-solutions)
[1463. Cherry Pickup II](https://leetcode.com/problems/cherry-pickup-ii/discuss/660828/Javascript-and-C%2B%2B-solutions)


Recurrence Relation to Reduce Asymptotic Bounds via Pre-calculations:

[42. Trapping Rain Water](https://leetcode.com/problems/trapping-rain-water/discuss/512006/Javascript-and-C%2B%2B-solutions)


Recurrence Relation to Minimize or Maximize an Objective Function:

[1277. Count Square Submatrices with All Ones](https://leetcode.com/problems/count-square-submatrices-with-all-ones/discuss/442151/Javascript-and-C%2B%2B-solutions)


Bottom-Up Sequentially Building Upon "Buckets" of Previous Solutions (is this a good title???):

[338. Counting Bits](https://leetcode.com/problems/counting-bits/discuss/657068/Javascript-and-C%2B%2B-solutions)